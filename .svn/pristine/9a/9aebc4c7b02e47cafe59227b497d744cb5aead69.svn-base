package com.zjh.controller;

import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Date;
import java.util.UUID;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import net.coobird.thumbnailator.Thumbnails;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import com.zjh.base.BaseController;
import com.zjh.common.constant.StatusConstant;
import com.zjh.pojo.Affix;
import com.zjh.pojo.News;
import com.zjh.service.AffixService;
import com.zjh.service.NewsService;

@Controller
@RequestMapping("/news")
public class NewsController extends BaseController {

	@Autowired
	private NewsService newsService;
	@Autowired
	private AffixService affixService;
	

	@RequestMapping(value = "/list")
	public String list(Model model, String keyWord, Integer type, String startTime, String endTime, Integer page) throws Exception {
		//新闻列表分页
		model.addAttribute("keyWord", keyWord);
		model.addAttribute("type", type == null ? 0 : type);
		model.addAttribute("startTime", startTime);
		model.addAttribute("endTime", endTime);
		model.addAttribute("pageInfo", newsService.list(keyWord, type == null ? 0 : type, startTime, endTime, page == null ? 1 : page, rows));
		return "news/list";
	}

	@RequestMapping(value = "/select", method = RequestMethod.GET)
	public String select(Model model, Integer id) {
		// 新增页/更新页
		id = id == null ? 0 : id;
		if (id > 0) {
			model.addAttribute("news", newsService.getById(id));
		}
		return "news/select";
	}

	@RequestMapping(value = "/add", method = RequestMethod.POST)
	@ResponseBody
	public void add(HttpServletRequest request,String title, String author, String sources, Integer type, String description, String content, @RequestParam("imageFile") MultipartFile imageFile, @RequestParam("affixFile") MultipartFile affixFile,PrintWriter out) throws Exception {
		// 新增方法
		News news = new News();
		news.setTitle(title);
		news.setAuthor(author);
		news.setSources(sources);
		news.setType(type);
		news.setDescription(description);
		news.setContent(content);
		news.setCreatetime(new Date());
		news.setStatus(StatusConstant.ENABLE_STATUS);
		
		if (!imageFile.isEmpty()) {
			String fileName = "news_" + System.currentTimeMillis() + ".jpg";
			 //获得项目的路径  
	        ServletContext sc = request.getSession().getServletContext();  
	        // 上传位置  
	        String path = sc.getRealPath("/images/zjh/cover/"); // 设定文件保存的目录  
	        File f = new File(path);  
	        if (!f.exists()) {
	        	  f.mkdirs(); 
	        }
	        System.out.println(BaseController.SMALL_PATH + fileName);
	        System.out.println(BaseController.COVER_PATH + fileName);
	        
			try {
				File myFile = new File(path, fileName);
            	//上传到本地
            	imageFile.transferTo(myFile);
				//写一份首页展示图片
            	//FileUtils.copyFile(myFile, new File(BaseController.COVER_PATH + fileName));
            	Thumbnails.of(myFile).size(150, 105).keepAspectRatio(false).toFile(new File(BaseController.SMALL_PATH + fileName));
				//写一份新闻列表的展示图片
            	Thumbnails.of(myFile).size(235, 135).keepAspectRatio(false).toFile(new File(BaseController.COVER_PATH + fileName));
				//写一份到后台展示是小图片
            	Thumbnails.of(myFile).size(50, 40).keepAspectRatio(false).toFile(new File(path+"/sysimg/"+ fileName));
            	news.setSysimg("/images/zjh/cover/sysimg/"+fileName);
            	news.setImg("/images/zjh/cover/" + fileName);
            	news.setSmallimg("/images/zjh/cover/small/"+fileName);
			} catch (IOException e) {
				logger.error("upload img fail.", e);
			} 
		}
		if(!affixFile.isEmpty()){
			Affix affixModel = new Affix();
			 //获得项目的路径  
	        ServletContext sc = request.getSession().getServletContext();  
	        // 设定文件保存的目录  
	        String path = sc.getRealPath("/upload/affix/news/");
	        
			String affixType = affixFile.getOriginalFilename().substring(affixFile.getOriginalFilename().lastIndexOf(".")+1);
			long affixSize = affixFile.getSize();
		//	byte[] affixContent= affixFile.getBytes();
			String affixName = affixFile.getOriginalFilename().substring(0,affixFile.getOriginalFilename().lastIndexOf("."));
			String uid = UUID.randomUUID().toString().replace("-", "");
			String savePath = path+"/"+uid+affixName+"."+affixType;
			File myFile = new File(savePath);
        	//上传到本地
			affixFile.transferTo(myFile);
			affixModel.setAffixname(affixName);
			affixModel.setAffixtime(new Date());
			affixModel.setAffixtype(affixType);
			//affixModel.setContent(affixContent);
			affixModel.setStatus(0);
			affixModel.setSize(affixSize);
			affixModel.setAffixpath(savePath);
			affixModel.setDescrption("新闻附件");
			int id = affixService.insertAffixBackId(affixModel);
			if(id>0){
				System.out.println("新的文件ID："+affixModel.getId());
				news.setAffixid(affixModel.getId());
			}
			
		}
		
		if (newsService.add(news) > 0) {
			out.print(StatusConstant.SUCCESS);
		} else {
			out.print(StatusConstant.FAIL);
		}
		out.flush();
		out.close();
	}

	@RequestMapping(value = "/update", method = RequestMethod.POST)
	@ResponseBody
	public void update(HttpServletRequest request,Integer id, String title, String author, String sources, Integer type, String description, String content, @RequestParam("imageFile") MultipartFile imageFile,@RequestParam("affixFile") MultipartFile affixFile, PrintWriter out) throws Exception, Exception {
		// 更新方法
		News news = newsService.getById(id);
		news.setTitle(title);
		news.setAuthor(author);
		news.setSources(sources);
		news.setType(type);
		news.setDescription(description);
		news.setContent(content);
		if (!imageFile.isEmpty()) {
			String fileName = "news_" + System.currentTimeMillis() + ".jpg";
			 //获得项目的路径  
	        ServletContext sc = request.getSession().getServletContext();  
	        // 上传位置  
	        String path = sc.getRealPath("/images/zjh/cover/"); // 设定文件保存的目录  
	        File f = new File(path);  
	        if (!f.exists()) {
	        	  f.mkdirs(); 
	        }
//	        File f2 = new File(BaseController.COVER_PATH);
//	        if (!f2.exists()) {
//	        	  f2.mkdirs(); 
//	        }
			try {
				File myFile = new File(path, fileName);
            	//上传到本地
            	imageFile.transferTo(myFile);
            	//写一份首页展示图片
            	//FileUtils.copyFile(myFile, new File(BaseController.COVER_PATH + fileName));
            	Thumbnails.of(myFile).size(150, 105).keepAspectRatio(false).toFile(new File(BaseController.SMALL_PATH + fileName));
				//写一份新闻列表的展示图片
            	Thumbnails.of(myFile).size(235, 135).keepAspectRatio(false).toFile(new File(BaseController.COVER_PATH + fileName));
            	//写一份到后台展示是小图片
            	Thumbnails.of(myFile).size(50, 40).keepAspectRatio(false).toFile(new File(path+"/sysimg/"+ fileName));
            	news.setSysimg("/images/zjh/cover/sysimg/"+fileName);
            	news.setImg("/images/zjh/cover/" + fileName);
            	news.setSmallimg("/images/zjh/cover/small/"+fileName);
				
			} catch (IOException e) {
				logger.error("upload img fail.", e);
			} 
		}
		if(!affixFile.isEmpty()){
			Affix affixModel = new Affix();
			 //获得项目的路径  
	        ServletContext sc = request.getSession().getServletContext();  
	        // 设定文件保存的目录  
	        String path = sc.getRealPath("/upload/affix/news/");
	        
			String affixType = affixFile.getOriginalFilename().substring(affixFile.getOriginalFilename().lastIndexOf(".")+1);
			long affixSize = affixFile.getSize();
		//	byte[] affixContent= affixFile.getBytes();
			String affixName = affixFile.getOriginalFilename().substring(0,affixFile.getOriginalFilename().lastIndexOf("."));
			String uid = UUID.randomUUID().toString().replace("-", "");
			String savePath = path+"/"+uid+affixName+"."+affixType;
			File myFile = new File(savePath);
        	//上传到本地
			affixFile.transferTo(myFile);
			affixModel.setAffixname(affixName);
			affixModel.setAffixtime(new Date());
			affixModel.setAffixtype(affixType);
			//affixModel.setContent(affixContent);
			affixModel.setStatus(0);
			affixModel.setSize(affixSize);
			affixModel.setAffixpath(savePath);
			affixModel.setDescrption("新闻附件");
			int affixid = affixService.insertAffixBackId(affixModel);
			if(affixid>0){
				System.out.println("新的文件ID："+affixModel.getId());
				news.setAffixid(affixModel.getId());
			}
			
		}
		if (newsService.update(news) > 0) {
			out.print(StatusConstant.SUCCESS);
		} else {
			out.print(StatusConstant.FAIL);
		}
		out.flush();
		out.close();
	}

	@RequestMapping(value = "/delete", method = RequestMethod.POST)
	@ResponseBody
	public void delete(Integer id, PrintWriter out) {
		// 假删除方法
		News news = newsService.getById(id);
		news.setStatus(StatusConstant.DISABLE_STATUS);
		if (newsService.update(news) > 0) {
			out.print(StatusConstant.SUCCESS);
		} else {
			out.print(StatusConstant.FAIL);
		}
		out.flush();
		out.close();
	}
	
}
